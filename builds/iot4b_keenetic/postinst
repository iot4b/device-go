#!/bin/sh

# Constants
SERVICE_NAME="iot4b"
CONFIG_FILE="/opt/iot4b/init.json"
SERVICE_FILE="/opt/etc/init.d/S50iot4b"
CONTRACT_FILE="/opt/iot4b/contract.json"
TIMEOUT=60  # Timeout in seconds

#!/bin/sh

# Get device name
device_name=$(uname -n)
echo "=== Device Setup ================================================================="
echo "Device Name: $device_name"
echo ""

# Function to get non-empty input with validation
get_valid_input() {
    local prompt="$1"
    local regex="$2"
    local value=""
    while true; do
        read -rp "$prompt" value
        if echo "$value" | grep -Eq "$regex"; then
            break
        else
            echo "Invalid format. Please try again."
        fi
    done
    REPLY="$value"  # Store result in REPLY
}

# Blockchain address pattern
address_pattern='^0:[0-9a-fA-F]{64}$'
# Public key pattern
key_pattern='^0x[0-9a-fA-F]{64}$'

# Prompt for blockchain group address
echo "=================================================================================="
echo "--- Blockchain Group Address Setup ---"
get_valid_input "Enter the Blockchain Address of the Device Group (Format: 0:<64 hex characters>): " "$address_pattern"
group_address="$REPLY"
echo "Blockchain address accepted: $group_address"
echo ""

# Prompt for owner's public key
echo "=================================================================================="
echo "--- Owner's Public Key Setup ---"
get_valid_input "Enter the Owner's Public Key (Format: 0x<64 hex characters>): " "$key_pattern"
owner_key="$REPLY"
echo "Public key accepted: $owner_key"
echo ""

# Update the configuration file
if [[ -f "$CONFIG_FILE" ]]; then
    [[ -n "$group_address" ]] && sed -i "s|__GROUP__|$group_address|g" "$CONFIG_FILE"
    [[ -n "$owner_key" ]] && sed -i "s|__OWNER__|$owner_key|g" "$CONFIG_FILE"
    [[ -n "$device_name" ]] && sed -i "s|__DEVICENAME__|$device_name|g" "$CONFIG_FILE"
else
    echo "Error: Configuration file '$CONFIG_FILE' not found!"
    exit 1
fi

# Start and enable the service
echo ""
echo "Starting the IoT4B service..."

killall "$SERVICE_NAME" 2>/dev/null

if [ -x "$SERVICE_FILE" ]; then
    "$SERVICE_FILE" start
    if [ $? -eq 0 ]; then
        echo "Service started successfully."
    else
        echo "Failed to start the service."
        exit 1
    fi
    "$SERVICE_FILE" enable
    if [ $? -eq 0 ]; then
        echo "Service enabled successfully."
    else
        echo "Failed to enable the service."
        exit 1
    fi
else
    echo "Service script $SERVICE_FILE not found or is not executable."
    exit 1
fi

# Wait for smart contract deployment
echo ""
echo "Waiting for smart contract deployment (Timeout: ${TIMEOUT}s)..."

i=0
while [ $i -lt $TIMEOUT ]; do
    if [ -f "$CONTRACT_FILE" ]; then
        # Parse the address value without jq
        ADDRESS=$(grep -m1 '"address"' "$CONTRACT_FILE" | sed -E 's/.*"address":[[:space:]]*"([^"]+)".*/\1/')
        if [ -n "$ADDRESS" ]; then
            echo ""
            echo ""
            echo "=================================================================================="
            echo "--- Smart Contract Deployment Successful ---"
            echo "Device Name: $device_name"
            echo ""
            echo "=================================================================================="
            echo "--- Device Contract Address ---"
            echo ""
            echo "$ADDRESS"
            echo ""
            echo "Use this address to add the device to the application."
            echo "Setup completed successfully. You can now proceed with adding the device to your app."
            echo ""
            echo ""
            exit 0
        fi
    fi
    i=$((i + 1))
    sleep 1
done

echo "Timeout reached. Smart contract for $device_name was not deployed within ${TIMEOUT} seconds."
echo "Please check the service logs or ensure that the blockchain network is reachable."
exit 1
